package homework;

public class MercandiseManagerImpl implements IFunctionDao{
	private Mercandise[] mercandises;
	private int index;

	public MercandiseManagerImpl(){
		mercandises = new Mercandise[10];
	}
	
	public MercandiseManagerImpl(int size){
		mercandises = new Mercandise[size];
	}

	@Override
	public boolean save(Mercandise mer) {
		if(index < mercandises.length){
			mercandises[index] = mer;
			index++;
			return true;
		}
		return false;
	}

	@Override

	public boolean delete(String id) {
		for(int i = 0; i < index;i++){
			if(mercandises[i].getId().equals(id)){
				for(int j = i+1;j < index-1;j++){
					mercandises[j] = mercandises[j+1];
				}
				index--;
			}
			return true;
		}
		return false;
	}

	@Override

	public Mercandise modById(String id,double money) {
		for (int i = 0; i < index; i++) {
			if (mercandises[i].getId().equals(id)) {
				 mercandises[i].setMoney(money);
			}
		}
		return null;
	}
	

	@Override
	public Mercandise[] queryAll() {
		Mercandise[] m = new Mercandise[index];
		System.arraycopy(mercandises, 0, m, 0, index);;
		return m;
	}

	@Override
	public Mercandise queryById(String id) {
		for (int i = 0; i < index; i++) {
			if (mercandises[i].getId().equals(id)) {
				return mercandises[i];
			}
		}
		return null;
	}

	@Override
	public Mercandise queryByName(String name) {
		for (int i = 0; i < index; i++) {
			if (mercandises[i].getName().equals(name)) {
				return mercandises[i];
			}
		}
		return null;
	}

	@Override
	public Mercandise[] queryByMoney(double money) {
		int count = 0;
		for (int i = 0 ; i < index;i++){
			if (mercandises[i].getMoney()>0 && mercandises[i].getMoney() < money){
				count++;
			}
		}
		
		if(0 == count) {
			return null;
		}
		Mercandise[] mers = new Mercandise[index];
		for (int i = 0; i < index ;i++){
			if (mercandises[i].getMoney()>0 && mercandises[i].getMoney() < money){
				mers[--count] = mercandises[i];
			}
		}
		return mers;
	}

	@Override
	public Mercandise[] queryByState(boolean state) {
		int count = 0;
		for (int i = 0 ; i < index;i++){
			if (mercandises[i].isState() == state){
				count++;
			}
		}
		
		if(0 == count) {
			return null;
		}
		Mercandise[] mers = new Mercandise[index];
		for (int i = 0; i < index ;i++){
			if (mercandises[i].isState() == state){
				mers[--count] = mercandises[i];
			}
		}
		return mers;
	}

	@Override
	public Mercandise[] sortByAmount(int amount) {
		
		return null;
	}

}
